[
    {
        "label": "gerador",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gerador",
        "description": "gerador",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "find_empty",
        "kind": 2,
        "importPath": "backtracking_comparativo",
        "description": "backtracking_comparativo",
        "peekOfCode": "def find_empty(board, row=0, col=0):\n    # Se ultrapassarmos as linhas, não encontramos uma célula vazia.\n    if row == len(board):\n        return None\n    # Se encontrarmos uma célula vazia, retornamos sua posição.\n    if board[row][col][0] == 0:\n        return (row, col)\n    # Avançar para a próxima célula.\n    col += 1\n    if col == len(board[row]):",
        "detail": "backtracking_comparativo",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "backtracking_comparativo",
        "description": "backtracking_comparativo",
        "peekOfCode": "def is_valid(board, num, row, col):\n    size = len(board)\n    # Verificar se o número é válido na linha.\n    row_valid = all([board[row][i][0] != num for i in range(size)])\n    # Verificar se o número é válido na coluna.\n    col_valid = all([board[i][col][0] != num for i in range(size)])\n    # Check box\n    if size == 4:\n        box_rows, box_cols = 2, 2\n    elif size == 6:",
        "detail": "backtracking_comparativo",
        "documentation": {}
    },
    {
        "label": "try_number",
        "kind": 2,
        "importPath": "backtracking_comparativo",
        "description": "backtracking_comparativo",
        "peekOfCode": "def try_number(board, num, row, col):\n    if num > len(board):\n        return False\n    if is_valid(board, num, row, col):\n        board[row][col][0] = num\n        if solve_comparative(board):\n            return True\n        board[row][col][0] = 0\n    return try_number(board, num + 1, row, col)\ndef solve_comparative(board):",
        "detail": "backtracking_comparativo",
        "documentation": {}
    },
    {
        "label": "solve_comparative",
        "kind": 2,
        "importPath": "backtracking_comparativo",
        "description": "backtracking_comparativo",
        "peekOfCode": "def solve_comparative(board):\n    find = find_empty(board)\n    if not find:\n        return True\n    row, col = find\n    return try_number(board, 1, row, col)\ndef main():\n    comparative_sudoku_board = gerador.load_board_from_file()\n    print(\"--------inicial----------\\n\")\n    gerador.print_board(comparative_sudoku_board)",
        "detail": "backtracking_comparativo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backtracking_comparativo",
        "description": "backtracking_comparativo",
        "peekOfCode": "def main():\n    comparative_sudoku_board = gerador.load_board_from_file()\n    print(\"--------inicial----------\\n\")\n    gerador.print_board(comparative_sudoku_board)\n    print(\"\\n--------resolucao---------\\n\")\n    solve_comparative(comparative_sudoku_board)\n    gerador.print_board(comparative_sudoku_board)\nmain()",
        "detail": "backtracking_comparativo",
        "documentation": {}
    },
    {
        "label": "format_sudoku",
        "kind": 2,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "def format_sudoku(board):\n    formatted_board = []\n    size = len(board)\n    for i in range(size):\n        row = []\n        for j in range(size):\n            sinais_de_maior = 0\n            sinais_de_menor = 0\n            # Para a esquerda\n            if j == 0:",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "reformat_comparative_sudoku",
        "kind": 2,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "def reformat_comparative_sudoku(board):\n    reformatted_board = []\n    for row in board:\n        reformatted_row = []\n        for cell in row:\n            left, up, right, down = cell.split()\n            reformatted_cell = [0, left, up, right, down]\n            reformatted_row.append(reformatted_cell)\n        reformatted_board.append(reformatted_row)\n    return reformatted_board",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "reformat_comparative_sudoku_for_hs",
        "kind": 2,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "def reformat_comparative_sudoku_for_hs(board):\n    reformatted_board = []\n    for row in board:\n        reformatted_row = []\n        for cell in row:\n            left, up, right, down = cell.split()\n            reformatted_cell = (0, left, up, right, down)\n            reformatted_row.append(reformatted_cell)\n        reformatted_board.append(reformatted_row)\n    return reformatted_board",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "print_board",
        "kind": 2,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "def print_board(board):\n    size = len(board)\n    # Check box\n    if size == 4:\n        box_rows, box_cols = 2, 2\n    elif size == 6:\n        box_rows, box_cols = 3, 2\n    else:\n        box_rows, box_cols = 3, 3\n    for row in range(size):",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "read_solved_board_from_file",
        "kind": 2,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "def read_solved_board_from_file(filename):\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n        # Convertendo cada linha (string) de volta para uma lista\n        board = [ast.literal_eval(line.strip()) for line in lines]\n    return board\ndef load_board_from_file(filename=\"tabuleiro.txt\"):\n    with open(filename, 'r') as f:\n        # Carregando o tabuleiro do arquivo e\n        # convertendo de volta para a estrutura",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "load_board_from_file",
        "kind": 2,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "def load_board_from_file(filename=\"tabuleiro.txt\"):\n    with open(filename, 'r') as f:\n        # Carregando o tabuleiro do arquivo e\n        # convertendo de volta para a estrutura\n        # de dados original\n        board_tuple = ast.literal_eval(f.read().strip())\n    # Convertendo o tabuleiro de tuplas para listas\n    board_list = [[list(cell) for cell in row] for row in board_tuple]\n    return board_list\ndef main():",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "def main():\n    solved_board = read_solved_board_from_file(\"tabuleiros_prontos.txt\")\n    formatted_sudoku = format_sudoku(solved_board)\n    board_for_haskell = reformat_comparative_sudoku_for_hs(formatted_sudoku)\n    with open(\"tabuleiro.txt\", 'w') as arquivo:\n        arquivo.write(str(board_for_haskell))\nmain()",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "sudoku1",
        "kind": 5,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "sudoku1 = [\n    [5, 3, 4, 6, 7, 8, 9, 1, 2],\n    [6, 7, 2, 1, 9, 5, 3, 4, 8],\n    [1, 9, 8, 3, 4, 2, 5, 6, 7],\n    [8, 5, 9, 7, 6, 1, 4, 2, 3],\n    [4, 2, 6, 8, 5, 3, 7, 9, 1],\n    [7, 1, 3, 9, 2, 4, 8, 5, 6],\n    [9, 6, 1, 5, 3, 7, 2, 8, 4],\n    [2, 8, 7, 4, 1, 9, 6, 3, 5],\n    [3, 4, 5, 2, 8, 6, 1, 7, 9]",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "sudoku2",
        "kind": 5,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "sudoku2 = [\n    [8, 2, 7, 1, 5, 4, 3, 9, 6],\n    [9, 6, 5, 3, 2, 7, 1, 4, 8],\n    [3, 4, 1, 6, 8, 9, 7, 5, 2],\n    [5, 9, 3, 4, 6, 8, 2, 7, 1],\n    [4, 7, 2, 5, 1, 3, 6, 8, 9],\n    [6, 1, 8, 9, 7, 2, 4, 3, 5],\n    [7, 8, 6, 2, 3, 5, 9, 1, 4],\n    [1, 5, 4, 7, 9, 6, 8, 2, 3],\n    [2, 3, 9, 8, 4, 1, 5, 6, 7]",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "sudoku6x6",
        "kind": 5,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "sudoku6x6 = [\n    [4, 6, 5, 1, 3, 2],\n    [5, 3, 6, 2, 4, 1],\n    [1, 2, 3, 4, 5, 6],\n    [3, 4, 2, 6, 1, 5],\n    [6, 5, 1, 3, 2, 4],\n    [2, 1, 4, 5, 6, 3]\n]\nsudoku4x4 = [\n    [1, 2, 3, 4],",
        "detail": "gerador",
        "documentation": {}
    },
    {
        "label": "sudoku4x4",
        "kind": 5,
        "importPath": "gerador",
        "description": "gerador",
        "peekOfCode": "sudoku4x4 = [\n    [1, 2, 3, 4],\n    [3, 4, 1, 2],\n    [2, 1, 4, 3],\n    [4, 3, 2, 1]\n]\ndef read_solved_board_from_file(filename):\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n        # Convertendo cada linha (string) de volta para uma lista",
        "detail": "gerador",
        "documentation": {}
    }
]